// 일반 함수는 상태를 가질 수 없지만 함수 리터럴은 내부 상태를 가질 수 있다
// 캡쳐는 값 복사가 아닌 레퍼런스 복사
// 즉, 포인터가 복사된다고 볼 수 있다
// 함수 리터럴의 매개 변수는 Low-Level의 포인터 변수로서 존재하고 외부 변수의 주소 값을 캡쳐하여 수행한다
// 리터럴 시 사용시 주의 사항은 for문 내에서 메모리 주소 값의 캡쳐 및 포인팅이다
// 제대로 숙지하지 않으면 Go 루틴 사용시에 문제가 발생한다
// 기존 Go 루틴에서 다른 Go 루틴으로 람다를 이용해서 주소 값을 캡쳐하여 전달하는데, 주의 사항에 대해서 잘 알아두어야 한다
package main

import "fmt"

func CaptureLoop() {
	// 함수 타입의 슬라이스 f 선언 (함수 포인터 3개를 갖는 슬라이스)
	f := make([]func(), 3)
	fmt.Println("ValueLoop")
	for i := 0; i < 3; i++ {
		// 슬라이스 값을 리터럴으로 초기화
		f[i] = func() {
			fmt.Println(i)
		}
	}

	// 슬라이스 출력 (함수 타입(함수 포인터)이므로 함수 호출)
	for i := 0; i < 3; i++ {
		// 3, 3, 3이 출력된다
		// i는 for 문의 반복 조건으로서의 매개 변수이므로 반복 시 메모리를 새로 할당하지 않고 지속된다
		// 슬라이스의 함수 포인터들은 모두 같은 메모리 주소를 가지는 i를 동시에 가리킨다
		// 따라서 for문 반복 시 마지막으로 저장된 값 3을 담고 있는 i를 포인팅하여 출력한다
		f[i]()
	}
}

func CaptureLoop2() {
	f := make([]func(), 3)
	fmt.Println("ValueLoop2")
	for i := 0; i < 3; i++ {
		v := i
		// 슬라이스 값을 리터럴으로 초기화
		f[i] = func() {
			fmt.Println(v)
		}
	}

	for i := 0; i < 3; i++ {
		// 0, 1, 2가 출력된다
		// v 는 for문 블록 내에서 초기화 하는 지역 변수이므로 for 문이 반복될 때마다 새롭게 생성되어 값을 할당하므로 매번 다른 v의 메모리 주소를 포인팅하여 출력한다
		f[i]()
	}
}

func main() {
	CaptureLoop()
	CaptureLoop2()
}
